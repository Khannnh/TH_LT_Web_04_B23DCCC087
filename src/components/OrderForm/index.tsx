import React, { useEffect } from 'react';
import { Modal, Form, Input, Select, Button } from 'antd';
import type { Order } from '@/models/orderModel';
import { mockCustomers, mockProducts } from '@/models/orderModel';

const { Option } = Select;

interface OrderModalProps {
  visible: boolean;
  onClose: () => void;
  onSave: (order: Omit<Order, 'customerName' | 'totalAmount'>) => void;
  initialData?: Order | null;
}

const OrderModal: React.FC<OrderModalProps> = ({ visible, onClose, onSave, initialData }) => {
  const [form] = Form.useForm();

  useEffect(() => {
    if (initialData) {
      // Chuy·ªÉn ƒë·ªïi productList t·ª´ danh s√°ch s·∫£n ph·∫©m ƒë·∫ßy ƒë·ªß th√†nh ch·ªâ c√°c productId
      const productIds = initialData.productList.map(product => product.productId);
      form.setFieldsValue({
        ...initialData,
        productList: productIds,  // Ch·ªâ truy·ªÅn productId v√†o form
      });
    } else {
      form.resetFields();
    }
  }, [initialData, form]);

  return (
    <Modal
      title={initialData ? 'Ch·ªânh s·ª≠a ƒë∆°n h√†ng' : 'Th√™m ƒë∆°n h√†ng'}
      visible={visible}
      onCancel={onClose}
      footer={null}
    >
      <Form
        form={form}
        initialValues={initialData || {}}
        onFinish={(values) => {
          // ‚úÖ Chuy·ªÉn danh s√°ch productId th√†nh danh s√°ch ƒë·∫ßy ƒë·ªß { productId, name, price }
          const selectedProducts = values.productList.map((productId: string) => {
            const product = mockProducts.find(p => p.productId === productId);
            return product ? { productId, name: product.name, price: product.price } : null;
          }).filter(Boolean);

          // Log ƒë·ªÉ ki·ªÉm tra danh s√°ch s·∫£n ph·∫©m ƒë√£ ch·ªçn
          console.log('üöÄ Danh s√°ch s·∫£n ph·∫©m g·ª≠i l√™n:', selectedProducts);

          onSave({
            ...values,
            productList: selectedProducts,  // ƒê·∫£m b·∫£o l∆∞u danh s√°ch ƒë·∫ßy ƒë·ªß s·∫£n ph·∫©m
          });
        }}
        layout="vertical"
      >
        <Form.Item name="customerId" label="Kh√°ch h√†ng" rules={[{ required: true }]}> 
          <Select>
            {mockCustomers.map(customer => (
              <Option key={customer.customerId} value={customer.customerId}>{customer.name}</Option>
            ))}
          </Select>
        </Form.Item>
        
        <Form.Item name="orderDate" label="Ng√†y ƒë·∫∑t h√†ng" rules={[{ required: true }]}> 
          <Input type="datetime-local" />
        </Form.Item>
        
        <Form.Item name="productList" label="S·∫£n ph·∫©m" rules={[{ required: true }]}> 
          <Select mode="multiple"> 
            {mockProducts.map(product => (
              <Option key={product.productId} value={product.productId}>
                {product.name} - {product.price.toLocaleString()}ƒë
              </Option>
            ))}
          </Select>
        </Form.Item>

        <Form.Item name="status" label="Tr·∫°ng th√°i ƒë∆°n h√†ng" rules={[{ required: true }]}> 
          <Select>
            <Option value="Pending">Ch·ªù x√°c nh·∫≠n</Option>
            <Option value="Shipping">ƒêang giao</Option>
            <Option value="Completed">Ho√†n th√†nh</Option>
            <Option value="Cancelled">H·ªßy</Option>
          </Select>
        </Form.Item>
        
        <Form.Item>
          <Button type="primary" htmlType="submit">L∆∞u</Button>
          <Button onClick={onClose} style={{ marginLeft: 8 }}>H·ªßy</Button>
        </Form.Item>
      </Form>
    </Modal>
  );
};

export default OrderModal;
